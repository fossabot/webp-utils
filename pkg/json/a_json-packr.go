// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package json

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../schema", "cwebp.json", "\"\"")
	packr.PackJSONBytes("../schema", "gif2webp.json", "\"ewogICIkaWQiOiAiaHR0cHM6Ly9naXRodWIuY29tL3RpbW8tcmV5bWFubi93ZWJwLXV0aWxzL2Jsb2IvbWFpbi9wa2cvc2NoZW1hL2dpZjJ3ZWIuanNvbiIsCiAgIiRzY2hlbWEiOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgIm8iOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJTcGVjaWZ5IHRoZSBuYW1lIG9mIHRoZSBvdXRwdXQgV2ViUCBmaWxlLiBJZiBvbWl0dGVkLCBjd2VicCB3aWxsIHBlcmZvcm0gY29tcHJlc3Npb24gYnV0IG9ubHkgcmVwb3J0IHN0YXRpc3RpY3MuIFVzaW5nIFwiLVwiIGFzIG91dHB1dCBuYW1lIHdpbGwgZGlyZWN0IG91dHB1dCB0byAnc3Rkb3V0Jy4iLAogICAgICAidHlwZSI6ICJzdHJpbmciCiAgICB9LAogICAgImxvc3N5IjogewogICAgICAiZGVzY3JpcHRpb24iOiAiRW5jb2RlIHRoZSBpbWFnZSB1c2luZyBsb3NzeSBjb21wcmVzc2lvbi4iLAogICAgICAidHlwZSI6ICJib29sZWFuIgogICAgfSwKICAgICJtaXhlZCI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIk1peGVkIGNvbXByZXNzaW9uIG1vZGU6IG9wdGltaXplIGNvbXByZXNzaW9uIG9mIHRoZSBpbWFnZSBieSBwaWNraW5nIGVpdGhlciBsb3NzeSBvciBsb3NzbGVzcyBjb21wcmVzc2lvbiBmb3IgZWFjaCBmcmFtZSBoZXVyaXN0aWNhbGx5LiIsCiAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICB9LAogICAgInEiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJTcGVjaWZ5IHRoZSBjb21wcmVzc2lvbiBmYWN0b3IgZm9yIFJHQiBjaGFubmVscyBiZXR3ZWVuIDAgYW5kIDEwMC4gVGhlIGRlZmF1bHQgaXMgNzUuIEluIGNhc2Ugb2YgbG9zc2xlc3MgY29tcHJlc3Npb24gKGRlZmF1bHQpLCBhIHNtYWxsIGZhY3RvciBlbmFibGVzIGZhc3RlciBjb21wcmVzc2lvbiBzcGVlZCwgYnV0IHByb2R1Y2VzIGEgbGFyZ2VyIGZpbGUuIE1heGltdW0gY29tcHJlc3Npb24gaXMgYWNoaWV2ZWQgYnkgdXNpbmcgYSB2YWx1ZSBvZiAxMDAuIEluIGNhc2Ugb2YgbG9zc3kgY29tcHJlc3Npb24gKHNwZWNpZmllZCBieSB0aGUgLWxvc3N5IG9wdGlvbiksIGEgc21hbGwgZmFjdG9yIHByb2R1Y2VzIGEgc21hbGxlciBmaWxlIHdpdGggbG93ZXIgcXVhbGl0eS4gQmVzdCBxdWFsaXR5IGlzIGFjaGlldmVkIGJ5IHVzaW5nIGEgdmFsdWUgb2YgMTAwLiIsCiAgICAgICJ0eXBlIjogIm51bWJlciIsCiAgICAgICJtaW5pbXVtIjogMCwKICAgICAgIm1heGltdW0iOiAxMDAKICAgIH0sCiAgICAibWluX3NpemUiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbmNvZGUgaW1hZ2UgdG8gYWNoaWV2ZSBzbWFsbGVzdCBzaXplLiBUaGlzIGRpc2FibGVzIGtleSBmcmFtZSBpbnNlcnRpb24gYW5kIHBpY2tzIHRoZSBkaXNwb3NlIG1ldGhvZCByZXN1bHRpbmcgaW4gdGhlIHNtYWxsZXN0IG91dHB1dCBmb3IgZWFjaCBmcmFtZS4gSXQgdXNlcyBsb3NzbGVzcyBjb21wcmVzc2lvbiBieSBkZWZhdWx0LCBidXQgY2FuIGJlIGNvbWJpbmVkIHdpdGggLXEsIC1tLCAtbG9zc3kgb3IgLW1peGVkIG9wdGlvbnMuIiwKICAgICAgInR5cGUiOiAiaW50ZWdlciIKICAgIH0sCiAgICAibSI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlNwZWNpZnkgdGhlIGNvbXByZXNzaW9uIG1ldGhvZCB0byB1c2UuIFRoaXMgcGFyYW1ldGVyIGNvbnRyb2xzIHRoZSB0cmFkZSBvZmYgYmV0d2VlbiBlbmNvZGluZyBzcGVlZCBhbmQgdGhlIGNvbXByZXNzZWQgZmlsZSBzaXplIGFuZCBxdWFsaXR5LiBQb3NzaWJsZSB2YWx1ZXMgcmFuZ2UgZnJvbSAwIHRvIDYuIERlZmF1bHQgdmFsdWUgaXMgNC4gV2hlbiBoaWdoZXIgdmFsdWVzIGFyZSB1c2VkLCB0aGUgZW5jb2RlciB3aWxsIHNwZW5kIG1vcmUgdGltZSBpbnNwZWN0aW5nIGFkZGl0aW9uYWwgZW5jb2RpbmcgcG9zc2liaWxpdGllcyBhbmQgZGVjaWRlIG9uIHRoZSBxdWFsaXR5IGdhaW4uIExvd2VyIHZhbHVlIGNhbiByZXN1bHQgaW4gZmFzdGVyIHByb2Nlc3NpbmcgdGltZSBhdCB0aGUgZXhwZW5zZSBvZiBsYXJnZXIgZmlsZSBzaXplIGFuZCBsb3dlciBjb21wcmVzc2lvbiBxdWFsaXR5LiIsCiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAibWluaW11bSI6IDAsCiAgICAgICJtYXhpbXVtIjogNgogICAgfSwKICAgICJrbWluIjogewogICAgICAiZGVzY3JpcHRpb24iOiAiU3BlY2lmeSB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBkaXN0YW5jZSBiZXR3ZWVuIGNvbnNlY3V0aXZlIGtleSBmcmFtZXMgKGluZGVwZW5kZW50bHkgZGVjb2RhYmxlIGZyYW1lcykgaW4gdGhlIG91dHB1dCBhbmltYXRpb24uIFRoZSB0b29sIHdpbGwgaW5zZXJ0IHNvbWUga2V5IGZyYW1lcyBpbnRvIHRoZSBvdXRwdXQgYW5pbWF0aW9uIGFzIG5lZWRlZCBzbyB0aGF0IHRoaXMgY3JpdGVyaWEgaXMgc2F0aXNmaWVkLlxuXG5BIGttYXggdmFsdWUgb2YgMCB3aWxsIHR1cm4gb2ZmIGluc2VydGlvbiBvZiBrZXkgZnJhbWVzLiBBIGttYXggdmFsdWUgb2YgMSB3aWxsIHJlc3VsdCBpbiBhbGwgZnJhbWVzIGJlaW5nIGtleSBmcmFtZXMuIGttaW4gdmFsdWUgaXMgbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBib3RoIHRoZXNlIHNwZWNpYWwgY2FzZXMuIFR5cGljYWwgdmFsdWVzIGFyZSBpbiB0aGUgcmFuZ2UgMyB0byAzMC4gRGVmYXVsdCB2YWx1ZXMgYXJlIGttaW4gPSA5LCBrbWF4ID0gMTcgZm9yIGxvc3NsZXNzIGNvbXByZXNzaW9uIGFuZCBrbWluID0gMywga21heCA9IDUgZm9yIGxvc3N5IGNvbXByZXNzaW9uLlxuXG5UaGVzZSB0d28gb3B0aW9ucyBhcmUgcmVsZXZhbnQgb25seSBmb3IgYW5pbWF0ZWQgaW1hZ2VzIHdpdGggbGFyZ2UgbnVtYmVyIG9mIGZyYW1lcyAoPjUwKS5cblxuV2hlbiBsb3dlciB2YWx1ZXMgYXJlIHVzZWQsIG1vcmUgZnJhbWVzIHdpbGwgYmUgY29udmVydGVkIHRvIGtleSBmcmFtZXMuIFRoaXMgbWF5IGxlYWQgdG8gc21hbGxlciBudW1iZXIgb2YgZnJhbWVzIHJlcXVpcmVkIHRvIGRlY29kZSBhIGZyYW1lIG9uIGF2ZXJhZ2UsIHRoZXJlYnkgaW1wcm92aW5nIHRoZSBkZWNvZGluZyBwZXJmb3JtYW5jZS4gQnV0IHRoaXMgbWF5IGxlYWQgdG8gc2xpZ2h0bHkgYmlnZ2VyIGZpbGUgc2l6ZXMuIEhpZ2hlciB2YWx1ZXMgbWF5IGxlYWQgdG8gd29yc2UgZGVjb2RpbmcgcGVyZm9ybWFuY2UsIGJ1dCBzbWFsbGVyIGZpbGUgc2l6ZXMuXG5cblNvbWUgcmVzdHJpY3Rpb25zOlxuXG5rbWluIDwga21heCxcbmttaW4gPj0ga21heCAvIDIgKyAxOyBhbmRcbmttYXggLSBrbWluIDw9IDMwLlxuSWYgYW55IG9mIHRoZXNlIHJlc3RyaWN0aW9ucyBhcmUgbm90IG1ldCwgdGhleSB3aWxsIGJlIGVuZm9yY2VkIGF1dG9tYXRpY2FsbHkuIiwKICAgICAgInR5cGUiOiAiaW50ZWdlciIKICAgIH0sCiAgICAia21heCI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlNwZWNpZnkgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gZGlzdGFuY2UgYmV0d2VlbiBjb25zZWN1dGl2ZSBrZXkgZnJhbWVzIChpbmRlcGVuZGVudGx5IGRlY29kYWJsZSBmcmFtZXMpIGluIHRoZSBvdXRwdXQgYW5pbWF0aW9uLiBUaGUgdG9vbCB3aWxsIGluc2VydCBzb21lIGtleSBmcmFtZXMgaW50byB0aGUgb3V0cHV0IGFuaW1hdGlvbiBhcyBuZWVkZWQgc28gdGhhdCB0aGlzIGNyaXRlcmlhIGlzIHNhdGlzZmllZC5cblxuQSBrbWF4IHZhbHVlIG9mIDAgd2lsbCB0dXJuIG9mZiBpbnNlcnRpb24gb2Yga2V5IGZyYW1lcy4gQSBrbWF4IHZhbHVlIG9mIDEgd2lsbCByZXN1bHQgaW4gYWxsIGZyYW1lcyBiZWluZyBrZXkgZnJhbWVzLiBrbWluIHZhbHVlIGlzIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYm90aCB0aGVzZSBzcGVjaWFsIGNhc2VzLiBUeXBpY2FsIHZhbHVlcyBhcmUgaW4gdGhlIHJhbmdlIDMgdG8gMzAuIERlZmF1bHQgdmFsdWVzIGFyZSBrbWluID0gOSwga21heCA9IDE3IGZvciBsb3NzbGVzcyBjb21wcmVzc2lvbiBhbmQga21pbiA9IDMsIGttYXggPSA1IGZvciBsb3NzeSBjb21wcmVzc2lvbi5cblxuVGhlc2UgdHdvIG9wdGlvbnMgYXJlIHJlbGV2YW50IG9ubHkgZm9yIGFuaW1hdGVkIGltYWdlcyB3aXRoIGxhcmdlIG51bWJlciBvZiBmcmFtZXMgKD41MCkuXG5cbldoZW4gbG93ZXIgdmFsdWVzIGFyZSB1c2VkLCBtb3JlIGZyYW1lcyB3aWxsIGJlIGNvbnZlcnRlZCB0byBrZXkgZnJhbWVzLiBUaGlzIG1heSBsZWFkIHRvIHNtYWxsZXIgbnVtYmVyIG9mIGZyYW1lcyByZXF1aXJlZCB0byBkZWNvZGUgYSBmcmFtZSBvbiBhdmVyYWdlLCB0aGVyZWJ5IGltcHJvdmluZyB0aGUgZGVjb2RpbmcgcGVyZm9ybWFuY2UuIEJ1dCB0aGlzIG1heSBsZWFkIHRvIHNsaWdodGx5IGJpZ2dlciBmaWxlIHNpemVzLiBIaWdoZXIgdmFsdWVzIG1heSBsZWFkIHRvIHdvcnNlIGRlY29kaW5nIHBlcmZvcm1hbmNlLCBidXQgc21hbGxlciBmaWxlIHNpemVzLlxuXG5Tb21lIHJlc3RyaWN0aW9uczpcblxua21pbiA8IGttYXgsXG5rbWluID49IGttYXggLyAyICsgMTsgYW5kXG5rbWF4IC0ga21pbiA8PSAzMC5cbklmIGFueSBvZiB0aGVzZSByZXN0cmljdGlvbnMgYXJlIG5vdCBtZXQsIHRoZXkgd2lsbCBiZSBlbmZvcmNlZCBhdXRvbWF0aWNhbGx5LiIsCiAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICB9LAogICAgIm1ldGFkYXRhIjogewogICAgICAiZGVzY3JpcHRpb24iOiAiQSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBtZXRhZGF0YSB0byBjb3B5IGZyb20gdGhlIGlucHV0IHRvIHRoZSBvdXRwdXQgaWYgcHJlc2VudC4gVmFsaWQgdmFsdWVzOiBhbGwsIG5vbmUsIGljYywgeG1wLiBUaGUgZGVmYXVsdCBpcyB4bXAuIiwKICAgICAgImVudW0iOiBbCiAgICAgICAgImFsbCIsCiAgICAgICAgIm5vbmUiLAogICAgICAgICJpY2MiLAogICAgICAgICJ4bXAiCiAgICAgIF0KICAgIH0sCiAgICAiZiI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIkZvciBsb3NzeSBlbmNvZGluZyBvbmx5IChzcGVjaWZpZWQgYnkgdGhlIC1sb3NzeSBvcHRpb24pLiBTcGVjaWZ5IHRoZSBzdHJlbmd0aCBvZiB0aGUgZGVibG9ja2luZyBmaWx0ZXIsIGJldHdlZW4gMCAobm8gZmlsdGVyaW5nKSBhbmQgMTAwIChtYXhpbXVtIGZpbHRlcmluZykuIEEgdmFsdWUgb2YgMCB3aWxsIHR1cm4gb2ZmIGFueSBmaWx0ZXJpbmcuIEhpZ2hlciB2YWx1ZSB3aWxsIGluY3JlYXNlIHRoZSBzdHJlbmd0aCBvZiB0aGUgZmlsdGVyaW5nIHByb2Nlc3MgYXBwbGllZCBhZnRlciBkZWNvZGluZyB0aGUgcGljdHVyZS4gVGhlIGhpZ2hlciB0aGUgdmFsdWUgdGhlIHNtb290aGVyIHRoZSBwaWN0dXJlIHdpbGwgYXBwZWFyLiBUeXBpY2FsIHZhbHVlcyBhcmUgdXN1YWxseSBpbiB0aGUgcmFuZ2Ugb2YgMjAgdG8gNTAuIiwKICAgICAgIm1pbmltdW0iOiAwLAogICAgICAibWF4aW11bSI6IDEwMAogICAgfSwKICAgICJtdCI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlVzZSBtdWx0aS10aHJlYWRpbmcgZm9yIGVuY29kaW5nLCBpZiBwb3NzaWJsZS4iLAogICAgICAidHlwZSI6ICJib29sZWFuIgogICAgfSwKICAgICJsb29wX2NvbXBhdGliaWxpdHkiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJJZiBlbmFibGVkLCBoYW5kbGUgdGhlIGxvb3AgaW5mb3JtYXRpb24gaW4gYSBjb21wYXRpYmxlIGZhc2hpb24gZm9yIENocm9tZSB2ZXJzaW9uIHByaW9yIHRvIE02MiAoaW5jbHVzaXZlKSBhbmQgRmlyZWZveC4iLAogICAgICAidHlwZSI6ICJib29sZWFuIgogICAgfSwKICAgICJ2IjogewogICAgICAiZGVzY3JpcHRpb24iOiAiUHJpbnQgZXh0cmEgaW5mb3JtYXRpb24uIiwKICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgIH0sCiAgICAicXVpZXQiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJEbyBub3QgcHJpbnQgYW55dGhpbmciLAogICAgICAidHlwZSI6ICJib29sZWFuIgogICAgfQogIH0sCiAgInJlcXVpcmVkIjogWwogICAgIm8iCiAgXQp9\"")
}
