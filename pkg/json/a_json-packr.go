// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package json

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../schema", "cwebp.json", "\"\"")
	packr.PackJSONBytes("../schema", "gif2webp.json", "\"ewogICIkaWQiOiAiaHR0cHM6Ly9naXRodWIuY29tL3RpbW8tcmV5bWFubi93ZWJwLXV0aWxzL2Jsb2IvbWFpbi9wa2cvc2NoZW1hL2dpZjJ3ZWJwLmpzb24iLAogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicHJvcGVydGllcyI6IHsKICAgICJvIjogewogICAgICAiZGVzY3JpcHRpb24iOiAiU3BlY2lmeSB0aGUgbmFtZSBvZiB0aGUgb3V0cHV0IFdlYlAgZmlsZS4gSWYgb21pdHRlZCwgY3dlYnAgd2lsbCBwZXJmb3JtIGNvbXByZXNzaW9uIGJ1dCBvbmx5IHJlcG9ydCBzdGF0aXN0aWNzLiBVc2luZyBcIi1cIiBhcyBvdXRwdXQgbmFtZSB3aWxsIGRpcmVjdCBvdXRwdXQgdG8gJ3N0ZG91dCcuIiwKICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgfSwKICAgICJsb3NzeSI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIkVuY29kZSB0aGUgaW1hZ2UgdXNpbmcgbG9zc3kgY29tcHJlc3Npb24uIiwKICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgIH0sCiAgICAibWl4ZWQiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJNaXhlZCBjb21wcmVzc2lvbiBtb2RlOiBvcHRpbWl6ZSBjb21wcmVzc2lvbiBvZiB0aGUgaW1hZ2UgYnkgcGlja2luZyBlaXRoZXIgbG9zc3kgb3IgbG9zc2xlc3MgY29tcHJlc3Npb24gZm9yIGVhY2ggZnJhbWUgaGV1cmlzdGljYWxseS4iLAogICAgICAidHlwZSI6ICJib29sZWFuIgogICAgfSwKICAgICJxIjogewogICAgICAiZGVzY3JpcHRpb24iOiAiU3BlY2lmeSB0aGUgY29tcHJlc3Npb24gZmFjdG9yIGZvciBSR0IgY2hhbm5lbHMgYmV0d2VlbiAwIGFuZCAxMDAuIFRoZSBkZWZhdWx0IGlzIDc1LiBJbiBjYXNlIG9mIGxvc3NsZXNzIGNvbXByZXNzaW9uIChkZWZhdWx0KSwgYSBzbWFsbCBmYWN0b3IgZW5hYmxlcyBmYXN0ZXIgY29tcHJlc3Npb24gc3BlZWQsIGJ1dCBwcm9kdWNlcyBhIGxhcmdlciBmaWxlLiBNYXhpbXVtIGNvbXByZXNzaW9uIGlzIGFjaGlldmVkIGJ5IHVzaW5nIGEgdmFsdWUgb2YgMTAwLiBJbiBjYXNlIG9mIGxvc3N5IGNvbXByZXNzaW9uIChzcGVjaWZpZWQgYnkgdGhlIC1sb3NzeSBvcHRpb24pLCBhIHNtYWxsIGZhY3RvciBwcm9kdWNlcyBhIHNtYWxsZXIgZmlsZSB3aXRoIGxvd2VyIHF1YWxpdHkuIEJlc3QgcXVhbGl0eSBpcyBhY2hpZXZlZCBieSB1c2luZyBhIHZhbHVlIG9mIDEwMC4iLAogICAgICAidHlwZSI6ICJudW1iZXIiLAogICAgICAibWluaW11bSI6IDAsCiAgICAgICJtYXhpbXVtIjogMTAwCiAgICB9LAogICAgIm1pbl9zaXplIjogewogICAgICAiZGVzY3JpcHRpb24iOiAiRW5jb2RlIGltYWdlIHRvIGFjaGlldmUgc21hbGxlc3Qgc2l6ZS4gVGhpcyBkaXNhYmxlcyBrZXkgZnJhbWUgaW5zZXJ0aW9uIGFuZCBwaWNrcyB0aGUgZGlzcG9zZSBtZXRob2QgcmVzdWx0aW5nIGluIHRoZSBzbWFsbGVzdCBvdXRwdXQgZm9yIGVhY2ggZnJhbWUuIEl0IHVzZXMgbG9zc2xlc3MgY29tcHJlc3Npb24gYnkgZGVmYXVsdCwgYnV0IGNhbiBiZSBjb21iaW5lZCB3aXRoIC1xLCAtbSwgLWxvc3N5IG9yIC1taXhlZCBvcHRpb25zLiIsCiAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICB9LAogICAgIm0iOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJTcGVjaWZ5IHRoZSBjb21wcmVzc2lvbiBtZXRob2QgdG8gdXNlLiBUaGlzIHBhcmFtZXRlciBjb250cm9scyB0aGUgdHJhZGUgb2ZmIGJldHdlZW4gZW5jb2Rpbmcgc3BlZWQgYW5kIHRoZSBjb21wcmVzc2VkIGZpbGUgc2l6ZSBhbmQgcXVhbGl0eS4gUG9zc2libGUgdmFsdWVzIHJhbmdlIGZyb20gMCB0byA2LiBEZWZhdWx0IHZhbHVlIGlzIDQuIFdoZW4gaGlnaGVyIHZhbHVlcyBhcmUgdXNlZCwgdGhlIGVuY29kZXIgd2lsbCBzcGVuZCBtb3JlIHRpbWUgaW5zcGVjdGluZyBhZGRpdGlvbmFsIGVuY29kaW5nIHBvc3NpYmlsaXRpZXMgYW5kIGRlY2lkZSBvbiB0aGUgcXVhbGl0eSBnYWluLiBMb3dlciB2YWx1ZSBjYW4gcmVzdWx0IGluIGZhc3RlciBwcm9jZXNzaW5nIHRpbWUgYXQgdGhlIGV4cGVuc2Ugb2YgbGFyZ2VyIGZpbGUgc2l6ZSBhbmQgbG93ZXIgY29tcHJlc3Npb24gcXVhbGl0eS4iLAogICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgIm1pbmltdW0iOiAwLAogICAgICAibWF4aW11bSI6IDYKICAgIH0sCiAgICAia21pbiI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlNwZWNpZnkgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gZGlzdGFuY2UgYmV0d2VlbiBjb25zZWN1dGl2ZSBrZXkgZnJhbWVzIChpbmRlcGVuZGVudGx5IGRlY29kYWJsZSBmcmFtZXMpIGluIHRoZSBvdXRwdXQgYW5pbWF0aW9uLiBUaGUgdG9vbCB3aWxsIGluc2VydCBzb21lIGtleSBmcmFtZXMgaW50byB0aGUgb3V0cHV0IGFuaW1hdGlvbiBhcyBuZWVkZWQgc28gdGhhdCB0aGlzIGNyaXRlcmlhIGlzIHNhdGlzZmllZC5cblxuQSBrbWF4IHZhbHVlIG9mIDAgd2lsbCB0dXJuIG9mZiBpbnNlcnRpb24gb2Yga2V5IGZyYW1lcy4gQSBrbWF4IHZhbHVlIG9mIDEgd2lsbCByZXN1bHQgaW4gYWxsIGZyYW1lcyBiZWluZyBrZXkgZnJhbWVzLiBrbWluIHZhbHVlIGlzIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYm90aCB0aGVzZSBzcGVjaWFsIGNhc2VzLiBUeXBpY2FsIHZhbHVlcyBhcmUgaW4gdGhlIHJhbmdlIDMgdG8gMzAuIERlZmF1bHQgdmFsdWVzIGFyZSBrbWluID0gOSwga21heCA9IDE3IGZvciBsb3NzbGVzcyBjb21wcmVzc2lvbiBhbmQga21pbiA9IDMsIGttYXggPSA1IGZvciBsb3NzeSBjb21wcmVzc2lvbi5cblxuVGhlc2UgdHdvIG9wdGlvbnMgYXJlIHJlbGV2YW50IG9ubHkgZm9yIGFuaW1hdGVkIGltYWdlcyB3aXRoIGxhcmdlIG51bWJlciBvZiBmcmFtZXMgKD41MCkuXG5cbldoZW4gbG93ZXIgdmFsdWVzIGFyZSB1c2VkLCBtb3JlIGZyYW1lcyB3aWxsIGJlIGNvbnZlcnRlZCB0byBrZXkgZnJhbWVzLiBUaGlzIG1heSBsZWFkIHRvIHNtYWxsZXIgbnVtYmVyIG9mIGZyYW1lcyByZXF1aXJlZCB0byBkZWNvZGUgYSBmcmFtZSBvbiBhdmVyYWdlLCB0aGVyZWJ5IGltcHJvdmluZyB0aGUgZGVjb2RpbmcgcGVyZm9ybWFuY2UuIEJ1dCB0aGlzIG1heSBsZWFkIHRvIHNsaWdodGx5IGJpZ2dlciBmaWxlIHNpemVzLiBIaWdoZXIgdmFsdWVzIG1heSBsZWFkIHRvIHdvcnNlIGRlY29kaW5nIHBlcmZvcm1hbmNlLCBidXQgc21hbGxlciBmaWxlIHNpemVzLlxuXG5Tb21lIHJlc3RyaWN0aW9uczpcblxua21pbiA8IGttYXgsXG5rbWluID49IGttYXggLyAyICsgMTsgYW5kXG5rbWF4IC0ga21pbiA8PSAzMC5cbklmIGFueSBvZiB0aGVzZSByZXN0cmljdGlvbnMgYXJlIG5vdCBtZXQsIHRoZXkgd2lsbCBiZSBlbmZvcmNlZCBhdXRvbWF0aWNhbGx5LiIsCiAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICB9LAogICAgImttYXgiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJTcGVjaWZ5IHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGRpc3RhbmNlIGJldHdlZW4gY29uc2VjdXRpdmUga2V5IGZyYW1lcyAoaW5kZXBlbmRlbnRseSBkZWNvZGFibGUgZnJhbWVzKSBpbiB0aGUgb3V0cHV0IGFuaW1hdGlvbi4gVGhlIHRvb2wgd2lsbCBpbnNlcnQgc29tZSBrZXkgZnJhbWVzIGludG8gdGhlIG91dHB1dCBhbmltYXRpb24gYXMgbmVlZGVkIHNvIHRoYXQgdGhpcyBjcml0ZXJpYSBpcyBzYXRpc2ZpZWQuXG5cbkEga21heCB2YWx1ZSBvZiAwIHdpbGwgdHVybiBvZmYgaW5zZXJ0aW9uIG9mIGtleSBmcmFtZXMuIEEga21heCB2YWx1ZSBvZiAxIHdpbGwgcmVzdWx0IGluIGFsbCBmcmFtZXMgYmVpbmcga2V5IGZyYW1lcy4ga21pbiB2YWx1ZSBpcyBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJvdGggdGhlc2Ugc3BlY2lhbCBjYXNlcy4gVHlwaWNhbCB2YWx1ZXMgYXJlIGluIHRoZSByYW5nZSAzIHRvIDMwLiBEZWZhdWx0IHZhbHVlcyBhcmUga21pbiA9IDksIGttYXggPSAxNyBmb3IgbG9zc2xlc3MgY29tcHJlc3Npb24gYW5kIGttaW4gPSAzLCBrbWF4ID0gNSBmb3IgbG9zc3kgY29tcHJlc3Npb24uXG5cblRoZXNlIHR3byBvcHRpb25zIGFyZSByZWxldmFudCBvbmx5IGZvciBhbmltYXRlZCBpbWFnZXMgd2l0aCBsYXJnZSBudW1iZXIgb2YgZnJhbWVzICg+NTApLlxuXG5XaGVuIGxvd2VyIHZhbHVlcyBhcmUgdXNlZCwgbW9yZSBmcmFtZXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8ga2V5IGZyYW1lcy4gVGhpcyBtYXkgbGVhZCB0byBzbWFsbGVyIG51bWJlciBvZiBmcmFtZXMgcmVxdWlyZWQgdG8gZGVjb2RlIGEgZnJhbWUgb24gYXZlcmFnZSwgdGhlcmVieSBpbXByb3ZpbmcgdGhlIGRlY29kaW5nIHBlcmZvcm1hbmNlLiBCdXQgdGhpcyBtYXkgbGVhZCB0byBzbGlnaHRseSBiaWdnZXIgZmlsZSBzaXplcy4gSGlnaGVyIHZhbHVlcyBtYXkgbGVhZCB0byB3b3JzZSBkZWNvZGluZyBwZXJmb3JtYW5jZSwgYnV0IHNtYWxsZXIgZmlsZSBzaXplcy5cblxuU29tZSByZXN0cmljdGlvbnM6XG5cbmttaW4gPCBrbWF4LFxua21pbiA+PSBrbWF4IC8gMiArIDE7IGFuZFxua21heCAtIGttaW4gPD0gMzAuXG5JZiBhbnkgb2YgdGhlc2UgcmVzdHJpY3Rpb25zIGFyZSBub3QgbWV0LCB0aGV5IHdpbGwgYmUgZW5mb3JjZWQgYXV0b21hdGljYWxseS4iLAogICAgICAidHlwZSI6ICJpbnRlZ2VyIgogICAgfSwKICAgICJtZXRhZGF0YSI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIkEgY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgbWV0YWRhdGEgdG8gY29weSBmcm9tIHRoZSBpbnB1dCB0byB0aGUgb3V0cHV0IGlmIHByZXNlbnQuIFZhbGlkIHZhbHVlczogYWxsLCBub25lLCBpY2MsIHhtcC4gVGhlIGRlZmF1bHQgaXMgeG1wLiIsCiAgICAgICJlbnVtIjogWwogICAgICAgICJhbGwiLAogICAgICAgICJub25lIiwKICAgICAgICAiaWNjIiwKICAgICAgICAieG1wIgogICAgICBdCiAgICB9LAogICAgImYiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJGb3IgbG9zc3kgZW5jb2Rpbmcgb25seSAoc3BlY2lmaWVkIGJ5IHRoZSAtbG9zc3kgb3B0aW9uKS4gU3BlY2lmeSB0aGUgc3RyZW5ndGggb2YgdGhlIGRlYmxvY2tpbmcgZmlsdGVyLCBiZXR3ZWVuIDAgKG5vIGZpbHRlcmluZykgYW5kIDEwMCAobWF4aW11bSBmaWx0ZXJpbmcpLiBBIHZhbHVlIG9mIDAgd2lsbCB0dXJuIG9mZiBhbnkgZmlsdGVyaW5nLiBIaWdoZXIgdmFsdWUgd2lsbCBpbmNyZWFzZSB0aGUgc3RyZW5ndGggb2YgdGhlIGZpbHRlcmluZyBwcm9jZXNzIGFwcGxpZWQgYWZ0ZXIgZGVjb2RpbmcgdGhlIHBpY3R1cmUuIFRoZSBoaWdoZXIgdGhlIHZhbHVlIHRoZSBzbW9vdGhlciB0aGUgcGljdHVyZSB3aWxsIGFwcGVhci4gVHlwaWNhbCB2YWx1ZXMgYXJlIHVzdWFsbHkgaW4gdGhlIHJhbmdlIG9mIDIwIHRvIDUwLiIsCiAgICAgICJtaW5pbXVtIjogMCwKICAgICAgIm1heGltdW0iOiAxMDAKICAgIH0sCiAgICAibXQiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJVc2UgbXVsdGktdGhyZWFkaW5nIGZvciBlbmNvZGluZywgaWYgcG9zc2libGUuIiwKICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgIH0sCiAgICAibG9vcF9jb21wYXRpYmlsaXR5IjogewogICAgICAiZGVzY3JpcHRpb24iOiAiSWYgZW5hYmxlZCwgaGFuZGxlIHRoZSBsb29wIGluZm9ybWF0aW9uIGluIGEgY29tcGF0aWJsZSBmYXNoaW9uIGZvciBDaHJvbWUgdmVyc2lvbiBwcmlvciB0byBNNjIgKGluY2x1c2l2ZSkgYW5kIEZpcmVmb3guIiwKICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgIH0sCiAgICAidiI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlByaW50IGV4dHJhIGluZm9ybWF0aW9uLiIsCiAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICB9LAogICAgInF1aWV0IjogewogICAgICAiZGVzY3JpcHRpb24iOiAiRG8gbm90IHByaW50IGFueXRoaW5nIiwKICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgIH0KICB9LAogICJyZXF1aXJlZCI6IFsKICAgICJvIgogIF0KfQ==\"")
}
